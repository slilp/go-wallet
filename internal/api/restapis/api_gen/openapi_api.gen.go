// Package api_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api_gen

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /public/login)
	LoginUser(c *gin.Context)
	// User registration
	// (POST /public/register)
	RegisterUser(c *gin.Context)
	// Deposit into a wallet
	// (POST /secure/deposit)
	DepositPoints(c *gin.Context)
	// Transfer between wallets
	// (POST /secure/transfer)
	TransferBalance(c *gin.Context)
	// Create a new wallet
	// (POST /secure/wallet)
	CreateWallet(c *gin.Context)
	// Delete a wallet by ID
	// (DELETE /secure/wallet/{walletId})
	DeleteWallet(c *gin.Context, walletId string)
	// Update wallet by ID
	// (PUT /secure/wallet/{walletId})
	UpdateWallet(c *gin.Context, walletId string)
	// List wallet transactions
	// (GET /secure/wallet/{walletId}/transactions)
	ListWalletTransactions(c *gin.Context, walletId string, params ListWalletTransactionsParams)
	// Get all user wallets
	// (GET /secure/wallets)
	ListUserWallets(c *gin.Context)
	// Withdraw from a wallet
	// (POST /secure/withdraw)
	WithdrawPoints(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LoginUser(c)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// DepositPoints operation middleware
func (siw *ServerInterfaceWrapper) DepositPoints(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DepositPoints(c)
}

// TransferBalance operation middleware
func (siw *ServerInterfaceWrapper) TransferBalance(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TransferBalance(c)
}

// CreateWallet operation middleware
func (siw *ServerInterfaceWrapper) CreateWallet(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateWallet(c)
}

// DeleteWallet operation middleware
func (siw *ServerInterfaceWrapper) DeleteWallet(c *gin.Context) {

	var err error

	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameterWithOptions("simple", "walletId", c.Param("walletId"), &walletId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter walletId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteWallet(c, walletId)
}

// UpdateWallet operation middleware
func (siw *ServerInterfaceWrapper) UpdateWallet(c *gin.Context) {

	var err error

	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameterWithOptions("simple", "walletId", c.Param("walletId"), &walletId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter walletId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateWallet(c, walletId)
}

// ListWalletTransactions operation middleware
func (siw *ServerInterfaceWrapper) ListWalletTransactions(c *gin.Context) {

	var err error

	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameterWithOptions("simple", "walletId", c.Param("walletId"), &walletId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter walletId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWalletTransactionsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListWalletTransactions(c, walletId, params)
}

// ListUserWallets operation middleware
func (siw *ServerInterfaceWrapper) ListUserWallets(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUserWallets(c)
}

// WithdrawPoints operation middleware
func (siw *ServerInterfaceWrapper) WithdrawPoints(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.WithdrawPoints(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/public/login", wrapper.LoginUser)
	router.POST(options.BaseURL+"/public/register", wrapper.RegisterUser)
	router.POST(options.BaseURL+"/secure/deposit", wrapper.DepositPoints)
	router.POST(options.BaseURL+"/secure/transfer", wrapper.TransferBalance)
	router.POST(options.BaseURL+"/secure/wallet", wrapper.CreateWallet)
	router.DELETE(options.BaseURL+"/secure/wallet/:walletId", wrapper.DeleteWallet)
	router.PUT(options.BaseURL+"/secure/wallet/:walletId", wrapper.UpdateWallet)
	router.GET(options.BaseURL+"/secure/wallet/:walletId/transactions", wrapper.ListWalletTransactions)
	router.GET(options.BaseURL+"/secure/wallets", wrapper.ListUserWallets)
	router.POST(options.BaseURL+"/secure/withdraw", wrapper.WithdrawPoints)
}
