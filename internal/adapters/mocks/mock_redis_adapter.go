// Code generated by MockGen. DO NOT EDIT.
// Source: ./redis_adapter.go
//
// Generated by this command:
//
//	mockgen -source=./redis_adapter.go -destination=./mocks/mock_redis_adapter.go -package=mock_adapters
//

// Package mock_adapters is a generated GoMock package.
package mock_adapters

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockRedisAdapter is a mock of RedisAdapter interface.
type MockRedisAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockRedisAdapterMockRecorder
	isgomock struct{}
}

// MockRedisAdapterMockRecorder is the mock recorder for MockRedisAdapter.
type MockRedisAdapterMockRecorder struct {
	mock *MockRedisAdapter
}

// NewMockRedisAdapter creates a new mock instance.
func NewMockRedisAdapter(ctrl *gomock.Controller) *MockRedisAdapter {
	mock := &MockRedisAdapter{ctrl: ctrl}
	mock.recorder = &MockRedisAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisAdapter) EXPECT() *MockRedisAdapterMockRecorder {
	return m.recorder
}

// GetJSON mocks base method.
func (m *MockRedisAdapter) GetJSON(ctx context.Context, key string, dest any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJSON", ctx, key, dest)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetJSON indicates an expected call of GetJSON.
func (mr *MockRedisAdapterMockRecorder) GetJSON(ctx, key, dest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJSON", reflect.TypeOf((*MockRedisAdapter)(nil).GetJSON), ctx, key, dest)
}

// SetJSON mocks base method.
func (m *MockRedisAdapter) SetJSON(ctx context.Context, key string, value any, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetJSON", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetJSON indicates an expected call of SetJSON.
func (mr *MockRedisAdapterMockRecorder) SetJSON(ctx, key, value, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetJSON", reflect.TypeOf((*MockRedisAdapter)(nil).SetJSON), ctx, key, value, expiration)
}
