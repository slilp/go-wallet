// Code generated by MockGen. DO NOT EDIT.
// Source: ./register.go
//
// Generated by this command:
//
//	mockgen -source=./register.go -destination=./mocks/mock_register_service.go -package=mock_commands
//

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	reflect "reflect"

	api_gen "github.com/slilp/go-wallet/internal/api/restapis/api_gen"
	gomock "go.uber.org/mock/gomock"
)

// MockRegisterService is a mock of RegisterService interface.
type MockRegisterService struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterServiceMockRecorder
	isgomock struct{}
}

// MockRegisterServiceMockRecorder is the mock recorder for MockRegisterService.
type MockRegisterServiceMockRecorder struct {
	mock *MockRegisterService
}

// NewMockRegisterService creates a new mock instance.
func NewMockRegisterService(ctrl *gomock.Controller) *MockRegisterService {
	mock := &MockRegisterService{ctrl: ctrl}
	mock.recorder = &MockRegisterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterService) EXPECT() *MockRegisterServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockRegisterService) Handle(req api_gen.RegisterRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockRegisterServiceMockRecorder) Handle(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRegisterService)(nil).Handle), req)
}
