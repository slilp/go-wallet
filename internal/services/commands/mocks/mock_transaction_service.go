// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction.go
//
// Generated by this command:
//
//	mockgen -source=./transaction.go -destination=./mocks/mock_transaction_service.go -package=mock_commands
//

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
	isgomock struct{}
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// HandleDepositWithDrawBalance mocks base method.
func (m *MockTransactionService) HandleDepositWithDrawBalance(walletId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDepositWithDrawBalance", walletId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleDepositWithDrawBalance indicates an expected call of HandleDepositWithDrawBalance.
func (mr *MockTransactionServiceMockRecorder) HandleDepositWithDrawBalance(walletId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDepositWithDrawBalance", reflect.TypeOf((*MockTransactionService)(nil).HandleDepositWithDrawBalance), walletId, amount)
}

// HandleTransferBalance mocks base method.
func (m *MockTransactionService) HandleTransferBalance(from, to string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTransferBalance", from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleTransferBalance indicates an expected call of HandleTransferBalance.
func (mr *MockTransactionServiceMockRecorder) HandleTransferBalance(from, to, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTransferBalance", reflect.TypeOf((*MockTransactionService)(nil).HandleTransferBalance), from, to, amount)
}
