// Code generated by MockGen. DO NOT EDIT.
// Source: ./list_wallets.go
//
// Generated by this command:
//
//	mockgen -source=./list_wallets.go -destination=./mocks/mock_list_wallets_service.go -package=mock_queries
//

// Package mock_queries is a generated GoMock package.
package mock_queries

import (
	reflect "reflect"

	api_gen "github.com/slilp/go-wallet/internal/api/restapis/api_gen"
	gomock "go.uber.org/mock/gomock"
)

// MockListWalletsService is a mock of ListWalletsService interface.
type MockListWalletsService struct {
	ctrl     *gomock.Controller
	recorder *MockListWalletsServiceMockRecorder
	isgomock struct{}
}

// MockListWalletsServiceMockRecorder is the mock recorder for MockListWalletsService.
type MockListWalletsServiceMockRecorder struct {
	mock *MockListWalletsService
}

// NewMockListWalletsService creates a new mock instance.
func NewMockListWalletsService(ctrl *gomock.Controller) *MockListWalletsService {
	mock := &MockListWalletsService{ctrl: ctrl}
	mock.recorder = &MockListWalletsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListWalletsService) EXPECT() *MockListWalletsServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockListWalletsService) Handle(userId string) ([]api_gen.WalletResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", userId)
	ret0, _ := ret[0].([]api_gen.WalletResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockListWalletsServiceMockRecorder) Handle(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockListWalletsService)(nil).Handle), userId)
}
