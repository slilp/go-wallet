// Code generated by MockGen. DO NOT EDIT.
// Source: ./login.go
//
// Generated by this command:
//
//	mockgen -source=./login.go -destination=./mocks/mock_login_service.go -package=mock_queries
//

// Package mock_queries is a generated GoMock package.
package mock_queries

import (
	reflect "reflect"

	api_gen "github.com/slilp/go-wallet/internal/api/restapis/api_gen"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginService is a mock of LoginService interface.
type MockLoginService struct {
	ctrl     *gomock.Controller
	recorder *MockLoginServiceMockRecorder
	isgomock struct{}
}

// MockLoginServiceMockRecorder is the mock recorder for MockLoginService.
type MockLoginServiceMockRecorder struct {
	mock *MockLoginService
}

// NewMockLoginService creates a new mock instance.
func NewMockLoginService(ctrl *gomock.Controller) *MockLoginService {
	mock := &MockLoginService{ctrl: ctrl}
	mock.recorder = &MockLoginServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginService) EXPECT() *MockLoginServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockLoginService) Handle(username, password string) (*api_gen.LoginResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", username, password)
	ret0, _ := ret[0].(*api_gen.LoginResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockLoginServiceMockRecorder) Handle(username, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockLoginService)(nil).Handle), username, password)
}
