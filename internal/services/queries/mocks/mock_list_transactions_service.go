// Code generated by MockGen. DO NOT EDIT.
// Source: ./list_transactions.go
//
// Generated by this command:
//
//	mockgen -source=./list_transactions.go -destination=./mocks/mock_list_transactions_service.go -package=mock_queries
//

// Package mock_queries is a generated GoMock package.
package mock_queries

import (
	reflect "reflect"

	api_gen "github.com/slilp/go-wallet/internal/api/restapis/api_gen"
	gomock "go.uber.org/mock/gomock"
)

// MockListTransactionsService is a mock of ListTransactionsService interface.
type MockListTransactionsService struct {
	ctrl     *gomock.Controller
	recorder *MockListTransactionsServiceMockRecorder
	isgomock struct{}
}

// MockListTransactionsServiceMockRecorder is the mock recorder for MockListTransactionsService.
type MockListTransactionsServiceMockRecorder struct {
	mock *MockListTransactionsService
}

// NewMockListTransactionsService creates a new mock instance.
func NewMockListTransactionsService(ctrl *gomock.Controller) *MockListTransactionsService {
	mock := &MockListTransactionsService{ctrl: ctrl}
	mock.recorder = &MockListTransactionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListTransactionsService) EXPECT() *MockListTransactionsServiceMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockListTransactionsService) Handle(userId, walletId string, page, limit int) (int64, []api_gen.TransactionResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", userId, walletId, page, limit)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]api_gen.TransactionResponseData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Handle indicates an expected call of Handle.
func (mr *MockListTransactionsServiceMockRecorder) Handle(userId, walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockListTransactionsService)(nil).Handle), userId, walletId, page, limit)
}
