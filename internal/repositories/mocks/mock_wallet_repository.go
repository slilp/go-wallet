// Code generated by MockGen. DO NOT EDIT.
// Source: ./wallet_repository.go
//
// Generated by this command:
//
//	mockgen -source=./wallet_repository.go -destination=./mocks/mock_wallet_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	entity "github.com/slilp/go-wallet/internal/repositories/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
	isgomock struct{}
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWalletRepository) Create(req entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWalletRepositoryMockRecorder) Create(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWalletRepository)(nil).Create), req)
}

// Delete mocks base method.
func (m *MockWalletRepository) Delete(walletId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", walletId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWalletRepositoryMockRecorder) Delete(walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWalletRepository)(nil).Delete), walletId)
}

// ListAll mocks base method.
func (m *MockWalletRepository) ListAll(userId string) ([]entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", userId)
	ret0, _ := ret[0].([]entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockWalletRepositoryMockRecorder) ListAll(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockWalletRepository)(nil).ListAll), userId)
}

// QueryByIdAndUser mocks base method.
func (m *MockWalletRepository) QueryByIdAndUser(userId, walletId string) (*entity.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByIdAndUser", userId, walletId)
	ret0, _ := ret[0].(*entity.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByIdAndUser indicates an expected call of QueryByIdAndUser.
func (mr *MockWalletRepositoryMockRecorder) QueryByIdAndUser(userId, walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByIdAndUser", reflect.TypeOf((*MockWalletRepository)(nil).QueryByIdAndUser), userId, walletId)
}

// UpdateInfo mocks base method.
func (m *MockWalletRepository) UpdateInfo(id, name string, desc *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", id, name, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfo indicates an expected call of UpdateInfo.
func (mr *MockWalletRepositoryMockRecorder) UpdateInfo(id, name, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockWalletRepository)(nil).UpdateInfo), id, name, desc)
}
