// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_repository.go
//
// Generated by this command:
//
//	mockgen -source=./transaction_repository.go -destination=./mocks/mock_transaction_repository.go -package=mock_repositories
//

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	entity "github.com/slilp/go-wallet/internal/repositories/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionRepository is a mock of TransactionRepository interface.
type MockTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepositoryMockRecorder
	isgomock struct{}
}

// MockTransactionRepositoryMockRecorder is the mock recorder for MockTransactionRepository.
type MockTransactionRepositoryMockRecorder struct {
	mock *MockTransactionRepository
}

// NewMockTransactionRepository creates a new mock instance.
func NewMockTransactionRepository(ctrl *gomock.Controller) *MockTransactionRepository {
	mock := &MockTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepository) EXPECT() *MockTransactionRepositoryMockRecorder {
	return m.recorder
}

// CountByWalletId mocks base method.
func (m *MockTransactionRepository) CountByWalletId(walletId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByWalletId", walletId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByWalletId indicates an expected call of CountByWalletId.
func (mr *MockTransactionRepositoryMockRecorder) CountByWalletId(walletId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByWalletId", reflect.TypeOf((*MockTransactionRepository)(nil).CountByWalletId), walletId)
}

// List mocks base method.
func (m *MockTransactionRepository) List(walletId string, page, limit int) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", walletId, page, limit)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransactionRepositoryMockRecorder) List(walletId, page, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransactionRepository)(nil).List), walletId, page, limit)
}

// UpdateBalanceTransaction mocks base method.
func (m *MockTransactionRepository) UpdateBalanceTransaction(walletId string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceTransaction", walletId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalanceTransaction indicates an expected call of UpdateBalanceTransaction.
func (mr *MockTransactionRepositoryMockRecorder) UpdateBalanceTransaction(walletId, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateBalanceTransaction), walletId, amount)
}

// UpdateTransferTransaction mocks base method.
func (m *MockTransactionRepository) UpdateTransferTransaction(from, to string, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransferTransaction", from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTransferTransaction indicates an expected call of UpdateTransferTransaction.
func (mr *MockTransactionRepositoryMockRecorder) UpdateTransferTransaction(from, to, amount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransferTransaction", reflect.TypeOf((*MockTransactionRepository)(nil).UpdateTransferTransaction), from, to, amount)
}
